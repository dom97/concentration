{"version":3,"sources":["Components/gameinfoheader/GameInfoHeader.jsx","Components/card/Card.jsx","Components/endgame/EndGame.jsx","App.js","reportWebVitals.js","index.js"],"names":["GameInfoHeader","restartGame","currentPlayer","player1Score","player2Score","className","onClick","Card","id","flipped","handleClick","cardNumber","EndGame","Math","max","FACE_DOWN","DISPLAY_TIME","App","state","flippedArray","Array","fill","deck","generateDeck","numSelected","prevSelectedCard","prevCardId","pauseClick","event","preventDefault","cardId","target","isFlipped","slice","setState","prevState","newCard","previousCard","checkCardMatch","card1","card2","card1Id","card2Id","updatedDeck","setTimeout","flipBackCards","updatedFlipped","PAIRS","every","element","index","array","this","map","PureComponent","shuffleDeck","i","length","j","floor","random","temp","from","keys","concat","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8ac66f9f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst GameInfoHeader = ({ restartGame, currentPlayer, player1Score, player2Score }) => (\r\n  <div className=\"grid-header-container\">\r\n    <div className={`justify-left current-player ${currentPlayer > 0 ? \"player-1\" : \"player-2\"}`}>Currently Choosing: {currentPlayer > 0 ? \"Player 1\" : \"Player 2\"}</div>\r\n    <div className=\"justify-center scoreboard\">Player 1: {player1Score}  Player 2: {player2Score}</div>\r\n    <div className=\"justify-end\">\r\n      <button onClick={restartGame} className=\"restart-button\">Restart Game</button>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default GameInfoHeader;","import React from 'react';\r\n\r\nconst Card = ({ id, flipped, handleClick, cardNumber }) => (\r\n  <div className=\"pad\">\r\n    <button id={id} className={`card ${cardNumber !== -1 ? \"\" : \"hide-card\"} ${flipped ? \"card-front\" : \"card-back\"}`} onClick={handleClick} key=\"back\">\r\n      <div className={`${flipped ? \"\" : \"transparent\"}`}>{ cardNumber }</div>\r\n    </button>\r\n  </div>\r\n);\r\n\r\nexport default Card;","import React from 'react';\r\n\r\nconst EndGame = ({ restartGame, player1Score, player2Score }) => (\r\n  <div className=\"justify-center\">\r\n    <h1 className={`${player1Score === player2Score ? \"hidden\" : \"\"}`}>Game Over! Congrats to Player {player1Score > player2Score ? '1' : '2'} for winning with a score of {Math.max(player1Score, player2Score) }</h1>\r\n    <h1 className={`${player1Score === player2Score ? \"\" : \"hidden\"}`}>Game Over! The game ended in a tie! Want to play again to decide a winner?</h1>\r\n    <button className=\"restart-button\" onClick={restartGame}>Restart Game</button>\r\n  </div>\r\n);\r\n\r\nexport default EndGame;","import React, { PureComponent } from 'react';\r\nimport GameInfoHeader from './Components/gameinfoheader/GameInfoHeader';\r\nimport Card from './Components/card/Card';\r\nimport EndGame from './Components/endgame/EndGame';\r\n\r\nimport './main.css';\r\n\r\nconst PAIRS = 10\r\nconst PLAYER_1 = 1\r\nconst HIDDEN = -1\r\nconst FACE_DOWN = false\r\nconst DISPLAY_TIME = 800\r\n\r\nclass App extends PureComponent {\r\n\r\n  state = { \r\n    flippedArray: Array(20).fill(false),\r\n    deck: App.generateDeck(),\r\n    numSelected: 1,\r\n    prevSelectedCard: -1,\r\n    prevCardId: -1,\r\n    currentPlayer: 1,\r\n    player1Score: 0,\r\n    player2Score: 0,\r\n    pauseClick: false,\r\n  };\r\n\r\n\r\n  static shuffleDeck = (array) => {\r\n    for (var i = array.length - 1; i > 0; i--) {\r\n        var j = Math.floor(Math.random() * (i + 1));\r\n        var temp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = temp;\r\n    }\r\n  }\r\n  static generateDeck = () => {\r\n    let deck = Array.from(Array(PAIRS).keys())\r\n    deck = deck.concat([...deck])\r\n    App.shuffleDeck(deck)\r\n    return deck;\r\n  };\r\n\r\n  handleClick = event => {\r\n    event.preventDefault();\r\n    if (!this.state.pauseClick) {\r\n      const cardId = event.target.id;\r\n      const isFlipped = this.state.flippedArray.slice();\r\n  \r\n      if (!isFlipped[cardId]) {\r\n        isFlipped[cardId] = !isFlipped[cardId];\r\n        this.setState(prevState => ({ \r\n          prevSelectedCard: prevState.deck[cardId],\r\n          prevCardId: cardId,\r\n          flippedArray: isFlipped,\r\n          numSelected: prevState.numSelected + 1\r\n        }));\r\n  \r\n        if (this.state.numSelected === 2) {\r\n          this.setState(prevState => ({ \r\n            numSelected: 1,\r\n            pauseClick: true\r\n           }));\r\n          const prevCardId = this.state.prevCardId;\r\n          const newCard = this.state.deck[cardId];\r\n          const previousCard = this.state.prevSelectedCard;\r\n  \r\n          this.checkCardMatch(previousCard, newCard, prevCardId, cardId);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  checkCardMatch = (card1, card2, card1Id, card2Id) => {\r\n    if (card1 === card2) {\r\n      const updatedDeck = this.state.deck.slice();\r\n      updatedDeck[card1Id] = HIDDEN;\r\n      updatedDeck[card2Id] = HIDDEN;\r\n      if (this.state.currentPlayer === PLAYER_1) {\r\n        this.setState(prevState => ({\r\n          player1Score: prevState.player1Score + 1\r\n        }))\r\n        setTimeout(() => {\r\n          this.setState({\r\n            deck: updatedDeck,\r\n            pauseClick: false,\r\n          })\r\n        }, DISPLAY_TIME);\r\n      } else {\r\n        this.setState(prevState => ({\r\n          player2Score: prevState.player2Score + 1\r\n        }))\r\n        setTimeout(() => {\r\n          this.setState({\r\n            deck: updatedDeck,\r\n            pauseClick: false,\r\n          })\r\n        }, DISPLAY_TIME);\r\n      }\r\n    } else {\r\n      this.flipBackCards(card1Id, card2Id)\r\n    }\r\n  };\r\n\r\n  flipBackCards = (card1Id, card2Id) => {\r\n    const updatedFlipped = this.state.flippedArray.slice()\r\n    updatedFlipped[card1Id] = FACE_DOWN;\r\n    updatedFlipped[card2Id] = FACE_DOWN;\r\n    setTimeout(() => {\r\n      this.setState(prevState => ({ \r\n        flippedArray: updatedFlipped,\r\n        currentPlayer: prevState.currentPlayer * -1,\r\n        pauseClick: false,\r\n      }));\r\n    }, DISPLAY_TIME);\r\n  }\r\n\r\n  restartGame = () => {\r\n    this.setState({\r\n      flippedArray: Array(PAIRS * 2).fill(false),\r\n      deck: App.generateDeck(),\r\n      numSelected: 1,\r\n      prevSelectedCard: -1,\r\n      prevCardId: -1,\r\n      currentPlayer: 1,\r\n      player1Score: 0,\r\n      player2Score: 0,\r\n      pauseClick: false\r\n    });\r\n  };\r\n\r\n  EndGame = () => {\r\n    return this.state.flippedArray.every((element, index, array) => element !== false);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n     <div>\r\n       <GameInfoHeader\r\n          restartGame={this.restartGame}\r\n          currentPlayer={this.state.currentPlayer}\r\n          player1Score={this.state.player1Score}\r\n          player2Score={this.state.player2Score}\r\n        />\r\n       { this.EndGame() ? <EndGame\r\n        restartGame={this.restartGame}\r\n        player1Score={this.state.player1Score}\r\n        player2Score={this.state.player2Score}\r\n         /> :\r\n       <div className=\"grid-container\">\r\n          {\r\n            this.state.deck.map((cardNumber, index) => \r\n              <Card\r\n                key={index} \r\n                id={index} \r\n                cardNumber={cardNumber} \r\n                flipped={this.state.flippedArray[index]} \r\n                handleClick={this.handleClick}     \r\n              />\r\n            )\r\n          }\r\n        </div>\r\n       }\r\n     </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}